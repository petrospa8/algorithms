The following report for the practical 2 of Algorithms was done by Sergio Garcia Cascon (sergio.gcascon@udc.es)
and  Pedro Pillado Garcia-Gesto (pedro.pilladog@udc.es)

PRACTICAL 1 SORTING ALGORITHMS ANALYSIS

INTRODUCTION

This study was done with the goal of comparing the performance of different algorithms performing array sorting operations.
We have implemented the Insertion Sort algorithm and the Quick Sort algorithm.

All measurements were applied to arrays which size was of the form 2^K, starting in 500 to avoid anomalous time measurements
due to the infimous amount of time needed to sort smallers arrays.
The hardware used to extract conclusions corresponds to one of our personal computers which hardware has the follwing specifications:

lenovo thinkpad x250:
CPU: i5-5300U ( 2.30GHz 1600MHz 3MB) Dual-Core
RAM: 8 GB DDR3L SDRAM 1600 MHz
Secondary Storage: HDD toshiba 500GB SATA
GPU: Intel HD Graphics 5500

For the purpose of obtaining reliable time stamps of each execution instance the program automatically checks for measurements lower than 500 microseconds,
in which case time is measured in a loop of 1000 iterations, where the average time is obtained.
In those cases the table cell corresponding to the array size is followed by a star character: "*"

Theoretical complexity was calculated analysing the code.

THEORETICAL COMPLEXITY

  Here are the results about the Theoretical complexity that we've obtained during these tests.

  Insertion Sort:

    - Best case (ascending initialisation):
        · Underestimated bound: f = n ^ 0.8
        · Tight bound: g = n
        · Overestimated bound: h = n ^ 1.2

    - Worst case (descending and random initialisation):
        · Underestimated bound: f = n ^ 1.8
        · Tight bound: g = n ^ 2
        · Overestimated bound: h = n ^ 2.2

  Quick Sort:

        · Underestimated bound: f = n ^ 0.9
        · Tight bound: g = n ^ 1.1
        · Overestimated bound: h = n ^ 1.3

  In the Quick Sort algorithm the bounds remain the same with different thresholds.

BENCHMARKS

- All times were measured in microseconds.

- We've obtained some anomalous values during this test. They will be marked with the "&" symbol in the benchmarks.

·Insertion sort algorithm:

Theoretical complexity of the insertion sort algorithm for randomly initialised arrays:

 · Underestimated bound: f = n ^ 1.8 | t(n) / f(n) tends to infinity
 · Tight bound: g = n ^ 2  | t(n) / g(n) tends to ~0.0085
 · Overestimated bound: h = n ^ 2.2 | t(n) / h(n) tends to zero

Insertion sort with random initialisaion.

   n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
        500   |        727.000    |      0.0100783 &    |       0.0029080 &    |    0.0008391 &
       1000   |       2473.000    |      0.0098452 &    |       0.0024730 &    |    0.0006212 &
       2000   |       9415.000    |      0.0107638 &    |       0.0023537 &    |    0.0005147 &
       4000   |      14043.000    |      0.0046105      |       0.0008777      |    0.0001671
       8000   |      57114.000    |      0.0053849      |       0.0008924      |    0.0001479
      16000   |     223916.000    |      0.0060627      |       0.0008747      |    0.0001262
      32000   |     896211.000    |      0.0069685      |       0.0008752      |    0.0001099
      64000   |    3469538.000    |      0.0077473      |       0.0008471      |    0.0000926
     128000   |    15118584.000   |      0.0096947      |       0.0009228      |    0.0000878

 Theoretical complexity of the insertion sort algorithm for already ordered arrays:

 · Underestimated bound: f = n ^ 0.8 | t(n) / f(n) tends to infinity
 · Tight bound: g = n | t(n)/ g(n) tends to ~0.005
 · Overestimated bound: h = n ^ 1.2 | t(n) / h(n) tends to zero

 Insertion sort with ascending initialisaion.


           n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
               500 *  |          2.312    |      0.0160255      |       0.0046240      |    0.0013342
              1000 *  |          5.553    |      0.0221069      |       0.0055530      |    0.0013949
              2000 *  |          8.595    |      0.0196527      |       0.0042975      |    0.0009397
              4000 *  |         24.027    |      0.0315538      |       0.0060067      |    0.0011435
              8000 *  |         43.772    |      0.0330160      |       0.0054715      |    0.0009068
             16000 *  |         83.598    |      0.0362159      |       0.0052249      |    0.0007538
             32000 *  |        154.389    |      0.0384146      |       0.0048247      |    0.0006059
             64000 *  |        420.984    |      0.0601619      |       0.0065779      |    0.0007192
             128000   |        629.000    |      0.0516277      |       0.0049141      |    0.0004677

Theoretical complexity of the insertion sort algorithm for descending ordered arrays:

 · Underestimated bound: f = n ^ 1.8 | t(n) / f(n) tends to infinity
 · Tight bound: g = n ^ 2 | t(n) / g(n) tends to ~0.0017
 · Overestimated bound: h = n ^ 2.2 | t(n) / h(n) tends to zero

 Insertion sort with descending initialisaion.


           n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
               500 *  |        432.898    |      0.0060012      |       0.0017316      |    0.0004996
               1000   |       1723.000    |      0.0068594      |       0.0017230      |    0.0004328
               2000   |       7618.000    |      0.0087094      |       0.0019045      |    0.0004165
               4000   |      28212.000    |      0.0092625      |       0.0017632      |    0.0003357
               8000   |     111048.000    |      0.0104701      |       0.0017351      |    0.0002875
              16000   |     442416.000    |      0.0119788      |       0.0017282      |    0.0002493
              32000   |    1781425.000    |      0.0138515      |       0.0017397      |    0.0002185
              64000   |    7101324.000    |      0.0158568      |       0.0017337      |    0.0001896
             128000   |    29278680.000   |      0.0187747      |       0.0017870      |    0.0001701

·Quick sort algorithm:

Measurements of the quick sort algorithm were performed using three different threshold values, 1, 100 and 1000.
We have figured out that the computational complexity of the algorithm depends on the array values scheme.

Quick sort algorithm with threshold 1:

Theoretical complexity of the algorithm with a random initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.05
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero

Quick sort with random initialisaion:


          n          |         t         |      t(n)/f(n)      |      t(n)/g(n)     |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
              500 *  |         53.421    |        0.19890      |       0.05739      |    0.01656
             1000 *  |        112.033    |        0.22354      |       0.05615      |    0.01410
             2000 *  |        238.506    |        0.25502      |       0.05577      |    0.01219
              4000   |        539.000    |        0.30884      |       0.05879      |    0.01119
              8000   |       1093.000    |        0.33561      |       0.05562      |    0.00922
             16000   |       2327.000    |        0.38290      |       0.05524      |    0.00797
             32000   |       4943.000    |        0.43587      |       0.05474      |    0.00688
             64000   |      10691.000    |        0.50519      |       0.05524      |    0.00604
            128000   |      24087.000    |        0.60995      |       0.05806      |    0.00553
            256000   |      48125.000    |        0.65306      |       0.05411      |    0.00448
            512000   |      99009.000    |        0.72000      |       0.05194      |    0.00375
           1024000   |     206281.000    |        0.80388      |       0.05048      |    0.00317

Theoretical complexity of the algorithm with an ascending initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.018
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero


Quick sort with ascending initialisaion:

          n          |         t         |      t(n)/f(n)      |      t(n)/g(n)     |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
              500 *  |         19.045    |        0.07091      |       0.02046      |    0.00590
             1000 *  |         41.745    |        0.08329      |       0.02092      |    0.00526
             2000 *  |         87.519    |        0.09358      |       0.02046      |    0.00447
             4000 *  |        182.094    |        0.10434      |       0.01986      |    0.00378
             8000 *  |        386.628    |        0.11872      |       0.01967      |    0.00326
             16000   |        818.000    |        0.13460      |       0.01942      |    0.00280
             32000   |       1715.000    |        0.15123      |       0.01899      |    0.00239
             64000   |       3604.000    |        0.17030      |       0.01862      |    0.00204
            128000   |       7597.000    |        0.19238      |       0.01831      |    0.00174
            256000   |      16284.000    |        0.22098      |       0.01831      |    0.00152
            512000   |      37640.000    |        0.27372      |       0.01974      |    0.00142
           1024000   |      71596.000    |        0.27901      |       0.01752      |    0.00110

Theoretical complexity of the algorithm with a descending initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.019
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero

Quick sort with descending initialisaion:

          n          |         t         |      t(n)/f(n)      |      t(n)/g(n)     |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
              500 *  |         19.641    |        0.07313      |       0.02110      |    0.00609
             1000 *  |         43.315    |        0.08642      |       0.02171      |    0.00545
             2000 *  |         88.960    |        0.09512      |       0.02080      |    0.00455
             4000 *  |        217.555    |        0.12466      |       0.02373      |    0.00452
             8000 *  |        396.051    |        0.12161      |       0.02015      |    0.00334
             16000   |        835.000    |        0.13740      |       0.01982      |    0.00286
             32000   |       1744.000    |        0.15378      |       0.01931      |    0.00243
             64000   |       3680.000    |        0.17389      |       0.01901      |    0.00208
            128000   |       7792.000    |        0.19731      |       0.01878      |    0.00179
            256000   |      16915.000    |        0.22954      |       0.01902      |    0.00158
            512000   |      37718.000    |        0.27429      |       0.01979      |    0.00143
           1024000   |      73550.000    |        0.28662      |       0.01800      |    0.00113

Quick sort algorithm with threshold 10:

Theoretical complexity of the algorithm with a random initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.050
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero

Quick sort with random initialisaion:

         n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
             500 *  |         44.716    |      0.1664907      |       0.0480392      |    0.0138612
            1000 *  |         96.115    |      0.1917746      |       0.0481716      |    0.0121002
            2000 *  |        208.081    |      0.2224874      |       0.0486519      |    0.0106388
            4000 *  |        451.492    |      0.2586998      |       0.0492475      |    0.0093750
             8000   |        986.000    |      0.3027582      |       0.0501739      |    0.0083150
            16000   |       2101.000    |      0.3457149      |       0.0498763      |    0.0071957
            32000   |       4486.000    |      0.3955708      |       0.0496815      |    0.0062397
            64000   |       9611.000    |      0.4541576      |       0.0496559      |    0.0054292
           128000   |      22054.000    |      0.5584682      |       0.0531565      |    0.0050596
           256000   |      44472.000    |      0.6034908      |       0.0500061      |    0.0041436
           512000   |      91086.000    |      0.6623822      |       0.0477809      |    0.0034467
          1024000   |     189669.000    |      0.7391395      |       0.0464159      |    0.0029148

Theoretical complexity of the algorithm with an ascending initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.015
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero

Quick sort with ascending initialisaion:
         n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
             500 *  |         12.516    |      0.0466007      |       0.0134462      |    0.0038798
            1000 *  |         29.381    |      0.0586228      |       0.0147254      |    0.0036988
            2000 *  |         61.657    |      0.0659258      |       0.0144162      |    0.0031524
            4000 *  |        131.781    |      0.0755090      |       0.0143743      |    0.0027364
            8000 *  |        285.908    |      0.0877901      |       0.0145488      |    0.0024111
            16000   |        619.000    |      0.1018551      |       0.0146946      |    0.0021200
            32000   |       1305.000    |      0.1150736      |       0.0144526      |    0.0018152
            64000   |       2799.000    |      0.1322638      |       0.0144612      |    0.0015811
           128000   |       6051.000    |      0.1532280      |       0.0145847      |    0.0013882
           256000   |      13160.000    |      0.1785829      |       0.0147976      |    0.0012262
           512000   |      30177.000    |      0.2194487      |       0.0158299      |    0.0011419
          1024000   |      59324.000    |      0.2311854      |       0.0145178      |    0.0009117

Theoretical complexity of the algorithm with a descending initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.015
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero

Quick sort with descending initialisaion:
         n          |         t         |      t(n)/f(n)      |      t(n)/g(n)      |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
             500 *  |         13.224    |      0.0492368      |       0.0142068      |    0.0040992
            1000 *  |         30.572    |      0.0609992      |       0.0153223      |    0.0038488
            2000 *  |         63.984    |      0.0684139      |       0.0149602      |    0.0032714
            4000 *  |        137.382    |      0.0787183      |       0.0149852      |    0.0028527
            8000 *  |        294.887    |      0.0905471      |       0.0150057      |    0.0024868
            16000   |        639.000    |      0.1051460      |       0.0151694      |    0.0021885
            32000   |       1346.000    |      0.1186889      |       0.0149067      |    0.0018722
            64000   |       2883.000    |      0.1362331      |       0.0148952      |    0.0016286
           128000   |       6101.000    |      0.1544942      |       0.0147052      |    0.0013997
           256000   |      13383.000    |      0.1816091      |       0.0150484      |    0.0012469
           512000   |      31245.000    |      0.2272153      |       0.0163902      |    0.0011823
          1024000   |      60513.000    |      0.2358190      |       0.0148088      |    0.0009299

Quick sort algorithm with threshold 100:

Theoretical complexity of the algorithm with a random initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.055
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero

Quick sort with random initialisaion:

          n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
              500 *  |         53.390    |      0.1987865      |       0.0573579      |    0.0165500
             1000 *  |        113.451    |      0.2263645      |       0.0568602      |    0.0142826
             2000 *  |        242.354    |      0.2591333      |       0.0566653      |    0.0123911
              4000   |        512.000    |      0.2933702      |       0.0558475      |    0.0106314
              8000   |       1106.000    |      0.3396051      |       0.0562803      |    0.0093269
             16000   |       2342.000    |      0.3853709      |       0.0555975      |    0.0080210
             32000   |       4944.000    |      0.4359568      |       0.0547537      |    0.0068768
             64000   |      10921.000    |      0.5160603      |       0.0564241      |    0.0061692
            128000   |      25536.000    |      0.6466420      |       0.0615491      |    0.0058584
            256000   |      49297.000    |      0.6689667      |       0.0554315      |    0.0045931
            512000   |     101294.000    |      0.7366154      |       0.0531357      |    0.0038329
           1024000   |     208856.000    |      0.8139111      |       0.0511113      |    0.0032096

Theoretical complexity of the algorithm with an ascending initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.011
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero


Quick sort with ascending initialisaion:

          n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
              500 *  |          6.817    |      0.0253817      |       0.0073236      |    0.0021132
             1000 *  |         16.524    |      0.0329697      |       0.0082816      |    0.0020802
             2000 *  |         41.199    |      0.0440514      |       0.0096328      |    0.0021064
             4000 *  |         93.000    |      0.0532879      |       0.0101442      |    0.0019311
             8000 *  |        201.844    |      0.0619776      |       0.0102711      |    0.0017022
            16000 *  |        451.114    |      0.0742298      |       0.0107091      |    0.0015450
             32000   |       1009.000    |      0.0889726      |       0.0111745      |    0.0014034
             64000   |       2197.000    |      0.1038169      |       0.0113509      |    0.0012411
            128000   |       4686.000    |      0.1186624      |       0.0112946      |    0.0010751
            256000   |      10132.000    |      0.1374926      |       0.0113928      |    0.0009440
            512000   |      27240.000    |      0.1980907      |       0.0142893      |    0.0010308
           1024000   |      50650.000    |      0.1973829      |       0.0123951      |    0.0007784

Theoretical complexity of the algorithm with a descending initialised array:

· Underestimated bound: f = n ^ 0.9 | t(n) / f(n) tends to infinity
· Tight bound: g = n ^ 1.1 | t(n) / g(n) tends to ~0.011
· Overestimated bound: h = n ^ 1.3 | t(n) / h(n) tends to zero

Quick sort with descending initialisaion:

          n          |         t         |      t(n)/f(n)      |      t(n)/g(n)       |   t(n)/h(n)
-----------------------------------------------------------------------------------------------------
              500 *  |          7.504    |      0.0279396      |       0.0080617      |    0.0023261
             1000 *  |         20.117    |      0.0401387      |       0.0100824      |    0.0025326
             2000 *  |         44.218    |      0.0472794      |       0.0103387      |    0.0022608
             4000 *  |        100.235    |      0.0574335      |       0.0109334      |    0.0020813
             8000 *  |        229.035    |      0.0703268      |       0.0116547      |    0.0019315
            16000 *  |        468.112    |      0.0770268      |       0.0111127      |    0.0016032
             32000   |       1085.000    |      0.0956742      |       0.0120161      |    0.0015092
             64000   |       2226.000    |      0.1051873      |       0.0115008      |    0.0012575
            128000   |       4877.000    |      0.1234991      |       0.0117550      |    0.0011189
            256000   |      10601.000    |      0.1438570      |       0.0119202      |    0.0009877
            512000   |      28199.000    |      0.2050646      |       0.0147923      |    0.0010670
           1024000   |      51396.000    |      0.2002900      |       0.0125776      |    0.0007898

CONCLUSIONS

After sorting all the algorithms and analysing the times obtained we can come to the conclusion that the insertion sort algorithm is generally slower than
the quick sort algorithm. There's an exception when sorting an ascending array, where the insertion sort is quicker than the quick sort.
In the insertion sort algorithm we can differentiate between the best case (ascending initialisation array) and the worst cases (random and descending)
pretty easily by looking at the code.
All quick sort cases share the same computational complexity, this quick sort implementation has very poor performance in arrays already ordered.
